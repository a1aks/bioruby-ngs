= bio-ngs

Provides a framework for handling NGS data with Bioruby.

== What we want to do and support
* SAMtools
* BWA
* Bowtie/TopHat/Cufflinks

* Reporting: text and graphs
* SGE? 

== Tasks
We'll try to keep this list updated but just in case type 'biongs -T' to get the most updated list
NOTE: We are working on these and other tasks, if you find some bugs, please open an issue on Github. 
=== bwa

* biongs bwa:aln:long [FASTQ] --file-out=FILE_OUT --prefix=PREFIX                                      # Run the aligment for LONG query sequences
* biongs bwa:aln:short [FASTQ] --file-out=FILE_OUT --prefix=PREFIX                                     # Run the aligment for SHORT query sequences
* biongs bwa:index:long [FASTA]                                                                        # Make the BWT index for a LONG FASTA database
* biongs bwa:index:short [FASTA]                                                                       # Make the BWT index for a SHORT FASTA database
* biongs bwa:sam:paired --fastq=one two three --file-out=FILE_OUT --prefix=PREFIX --sai=one two three  # Convert SAI alignment output into SAM format (paired ends)
* biongs bwa:sam:single [SAI] --fastq=FASTQ --file-out=FILE_OUT --prefix=PREFIX                        # Convert SAI alignment output into SAM format (single end)

=== convert
Most of this tasks create sub-processes to speed up conversions

* biongs convert:bam:extract_genes BAM GENES --ensembl-release=N  # Extract GENES from bam. It connects to Ensembl Humnan, release 61
* biongs convert:bam:sort BAM [PREFIX]
* biongs convert:bcl:qseq:convert RUN OUTPUT [JOBS]              # Convert a bcl dataset in qseq
* biongs convert:illumina:fastq:trim_b FASTQ                     # perform a trim on all the sequences on B qualities with Illumina's criteria. Ref to CASAVA manual.
* biongs convert:qseq:fastq:by_file FIRST OUTPUT                 # Convert a qseq file into fastq
* biongs convert:qseq:fastq:by_lane LANE OUTPUT                  # Convert all the file in the current and descendant directories belonging to the specified lane in fastq. This command is specific for Illum...
* biongs convert:qseq:fastq:by_lane_index LANE INDEX OUTPUT      # Convert the qseq from a line and index in a fastq file
* biongs convert:qseq:fastq:samples_by_lane SAMPLES LANE OUTPUT  # Convert the qseqs for each sample in a specific lane. SAMPLES is an array of index codes separated by commas lane is an integer

=== quality

* biongs quality:boxplot FASTQ_QUALITY_STATS                   # plot reads quality as boxplot
* biongs quality:fastq_stats FASTQ                             # Reports quality of FASTQ file
* biongs quality:illumina_b_profile_raw FASTQ --read-length=N  # perform a profile for reads coming fom Illumina 1.5+ and write the report in a txt file
* biongs quality:illumina_b_profile_svg FASTQ --read-length=N  # perform a profile for reads coming fom Illumina 1.5+
* biongs quality:reads FASTQ                                   # perform quality check for NGS reads
* biongs quality:reads_coverage FASTQ_QUALITY_STATS            # plot reads coverage in bases
* biongs quality:trim FASTQ                                    # trim all the sequences



=== rna

* biongs rna:idx2fasta INDEX FASTA               # Create a fasta file from an indexed genome, using bowtie-inspect
* biongs rna:tophat DIST INDEX OUTPUTDIR FASTQS  # run tophat as from command line, default 6 processors

=== root

* biongs project NAME  

=== sff

* biongs sff:extract [FILE]  # Run sff_extract on a SFF file


== TasksExamples

   biongs convert:bam:extract_genes your_original.bam BLID,GATA3,PTPRC --ensembl_release=61 --ensembl_specie=homo_sapiens


= ForDevelopers

== Wrapper
Bio-Ngs comes with a build-in wrapper to map binary software directly in BioRuby as objects. From this wrapper object is possible to create Thor task as well, with a lot of sugar.
=== Wrapping a binary

We want wrap a TopHat the famous tool for NGS analyses.
 * The first step is to include the Wrapping module
 * set the name of the binary to call. Note: if you avid to set the program name it would not be possible to create a thor task and/or run the program
 * add the options that the binary accepts, usually if preferred to declare all the options, discover them typing 'your_program_name -h'

    module Bio
      module Ngs    
        class Tophat
          include Bio::Command::Wrapper
          
          set_program Bio::Ngs::Utils.binary("tophat/tophat")
          add_option "output-dir",:type => :string, :aliases => '-o'
          add_option "min-anchor", :type => :numeric, :aliases => '-a'
          add_option "splice-mismatches", :type => :numeric, :aliases => '-m'
          #all other options that you want to expose with the wrapping
        end #Tophat
      end #Ngs
    endÂ #Bio

is possible to use specify
    use_aliases
if you want to give a priority to short notation or if your program has only the short notation but you want to extend the task with the long one as well.

In case you program work like git which has a main program and the sub_programs for each feature you can use specify the sub program name with
    set_sub_program "sub_name"
The wrapper will run the command composing:
    set_program set_sub_program options arguments
A practical example of this behavior is samtools which has multiple sub programs view, merge, sort, ....
SamTools is a particular case becau	se in biongs we are using bio-samtools a binding with FFI and the wrapper because the merge function was too complicated for the binding or at least we do not spent enough time on it, so we make the wrapping for this functionality.

This step is very similar to define a Thor task, add_option is grabbed/inspired from Thor.
Then you can user this binary also from a bioruby script just calling:
tophat = Bio::Ngs::Tophat.new
tophat.params = {"mate-inner-dist"=>dist, "output-dir"=>outputdir, "num-threads"=>1, "solexa1.3-quals"=>true}
#very important: you can pass parameters that have a name which has been previously declared in the Tophat's class.
# if you want to pass not declared parameters/options please use arguments.
tophat.run :arguments=>[index, "#{fastqs}" ]

=== Define the Task
With our new wrapper, let's define a Thor task on the fly 

    class MyTasks < Thor
      desc "tophat DIST INDEX OUTPUTDIR FASTQS", "run tophat as from command line, default 6 processors"
      Bio::Ngs::Tophat.new.thor_task(self, :tophat) do |wrapper, task, dist, index, outputdir, fastqs|
        wrapper.params = {"mate-inner-dist"=>dist, "output-dir"=>outputdir, "num-threads"=>1, "solexa1.3-quals"=>true}
        wrapper.run :arguments=>[index, "#{fastqs}" ], :separator=>"="
        #you tasks here
      end
    end

Now is you list the tasks with 'thor -T' you will see the new task.

You can create a new wrapper and configure it and run it from inside a Thor's tasks, like in 'biongs quality:boxplot'

    desc "boxplot FASTQ_QUALITY_STATS", "plot reads quality as boxplot"
    method_option :title, :type=>:string, :aliases =>"-t", :desc  => "Title (usually the solexa file name) - will be plotted on the graph."
    method_option :output, :type=>:string, :aliases =>"-o", :desc => "Output file name. default is input file_name with .txt."
    def boxplot(fastq_quality_stats)
      output_file = options.output || "#{fastq_quality_stats}.png"
      boxplot = Bio::Ngs::Fastx::ReadsBoxPlot.new
      boxplot.params={input:fastq_quality_stats, output:output_file}
      boxplot.run
    end

=== Override the run command when the binary dosen't behave normally
    module Bio
      module Ngs    
        module Samtools
          class View
            include Bio::Command::Wrapper
            set_program Bio::Ngs::Utils.binary("samtools")
            add_option "output", :type => :string, :aliases => '-o'

            alias :original_run :run
            def run(opts = {:options=>{}, :arguments=>[], :output_file=>nil, :separator=>"="})
              opts[:arguments].insert(0,"view")
              opts[:arguments].insert(1,"-b")
              opts[:arguments].insert(2,"-o")
              original_run(opts)
            end
          end #View
        end #Samtools
      end #Ngs
    end #Bio

=== Notes
* It's possible to add more sugar and we are working hard on it
* aliases are not well supported at this time. ToDo

= REQUIREMENTS
* http://hannonlab.cshl.edu/fastx_toolkit/
* http://www.gnuplot.info/

Pleas follow the instruction for your own distribution/operating system

= TODO
* Report the version of every software installed/used from bio-ngs 
* Develop fastq quality reports with RibuVis ?
* Write documentation
* Wrapper: better support for aliases and Wrapper#params
* Convert: re factor code to use ::Daemons
* Extract genes/regions of interest from a bam file and create a smaller bam
* Explore possibility to user DelayedJobs
* biongs ann:ensembl:gtf:features:categorize GTF GTF categorize also by chromosome not only by BioType
* configuration file input,output, experimental design
 
= ChangeLog
 * 2011-04-08: Tasks for filtering Ensembl annotation and create classifications. (misk_tasks branch)


= Contributing to bio-ngs

Please do not hesitate to contact us:

Raoul J.P. Bonnal, http://github.com/helios, r -at- bioruby -dot- org
Francesco Strozzi, http://github.com/fstrozzi
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Francesco Strozzi and Raoul J.P. Bonnal. See LICENSE.txt for
further details.

