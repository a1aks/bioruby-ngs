= bio-ngs

Provides a framework for handling NGS data with Bioruby.

== What we want to do and support
* SAMtools
* BWA
* Bowtie/TopHat/Cufflinks

* Reporting: text and graphs
* SGE? 

== Wrapper
Bio-Ngs comes with a build-in wrapper to map binary software directly in BioRuby as objects. From this wrapper object is possible to create Thor task as well, with a lot of sugar.
=== Wrapping a binary

We want wrap a TopHat the famous tool for NGS analyses.
 * The first step is to include the Wrapping module
 * set the name of the binary to call. Note: if you avid to set the program name it would not be possible to create a thor task and/or run the program
 * add the options that the binary accepts, usually if preferred to declare all the options, discover them typing 'your_program_name -h'

module Bio
  module Ngs    
    class Tophat

      include Bio::Command::Wrapper

      set_program Bio::Ngs::Utils.binary("tophat/tophat")

      add_option "output-dir",:type => :string, :aliases => '-o'
      add_option "min-anchor", :type => :numeric, :aliases => '-a'
      add_option "splice-mismatches", :type => :numeric, :aliases => '-m'
      #all other options that you want to expose with the wrapping

    end #Tophat
 end #Ngs
endÂ #Bio

This step is very similar to define a Thor task, add_option is grabbed/inspired from Thor.
Then you can user this binary also from a bioruby script just calling:
tophat = Bio::Ngs::Tophat.new
tophat.params = {"mate-inner-dist"=>dist, "output-dir"=>outputdir, "num-threads"=>1, "solexa1.3-quals"=>true}
#very important: you can pass parameters that have a name which has been previously declared in the Tophat's class.
# if you want to pass not declared parameters/options please use arguments.
tophat.run :arguments=>[index, "#{fastqs}" ]

=== Define the Task
With our new wrapper, let's define a Thor task on the fly 

class MyTasks < Thor

desc "tophat DIST INDEX OUTPUTDIR FASTQS", "run tophat as from command line, default 6 processors"
Bio::Ngs::Tophat.new.thor_task(self, :tophat) do |wrapper, task, dist, index, outputdir, fastqs|
    wrapper.params = {"mate-inner-dist"=>dist, "output-dir"=>outputdir, "num-threads"=>1, "solexa1.3-quals"=>true}
    wrapper.run :arguments=>[index, "#{fastqs}" ], :separator=>"="
    #you tasks here
end

Now is you list the tasks with 'thor -T' you will see the new task.

=== Notes
* It's possible to add more sugar and we are working hard on it
* aliases are not well supported at this time. ToDo

== TODO
* Report the version of every software installed/used from bio-ngs 
* Develop fastq quality reports with RibuVis ?
* Write documentation
* Wraper: better support for aliases and Wrapper#params

== Contributing to bio-ngs

Please do not hesitate to contact us:

Raoul J.P. Bonnal, http://github.com/helios, r -at- bioruby -dot- org
Francesco Strozzi, http://github.com/fstrozzi
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Francesco Strozzi and Raoul J.P. Bonnal. See LICENSE.txt for
further details.

